# Template-specific Friend Declarations Generator
# Creates friend declarations for template classes that avoid template parameter shadowing
# This generates operator_template_friend_declarations.inc for use in template classes

function(generate_template_friend_declarations BASE_DIR DISCOVERED_TYPES_FILE OUTPUT_FILE)
    message(STATUS "Generating template-specific friend declarations from existing friend declarations")
    message(STATUS "Using discovered types from: ${DISCOVERED_TYPES_FILE}")
    message(STATUS "Template friend declarations output: ${OUTPUT_FILE}")
    
    # Load discovered types
    include(${DISCOVERED_TYPES_FILE})
    
    # Read the existing operator friend declarations file
    set(OPERATOR_FRIEND_DECLARATIONS_FILE "${CMAKE_BINARY_DIR}/operator_friend_declarations.inc")
    
    if(NOT EXISTS ${OPERATOR_FRIEND_DECLARATIONS_FILE})
        message(FATAL_ERROR "Cannot find operator_friend_declarations.inc at: ${OPERATOR_FRIEND_DECLARATIONS_FILE}")
    endif()
    
    file(READ ${OPERATOR_FRIEND_DECLARATIONS_FILE} FRIEND_DECLARATIONS_CONTENT)
    
    # Initialize output content
    set(TEMPLATE_FRIENDS_CONTENT "// Auto-generated template-specific operator friend declarations\n")
    string(APPEND TEMPLATE_FRIENDS_CONTENT "// This file is generated by CMake - do not edit manually\n")
    string(APPEND TEMPLATE_FRIENDS_CONTENT "// Include this in the protected section of template classes to avoid parameter shadowing\n\n")
    
    # Split content into lines and process line by line
    string(REPLACE "\n" ";" CONTENT_LINES "${FRIEND_DECLARATIONS_CONTENT}")
    
    foreach(LINE ${CONTENT_LINES})
        string(STRIP "${LINE}" CLEAN_LINE)
        
        # Skip empty lines and comment lines
        if(NOT CLEAN_LINE STREQUAL "" AND NOT CLEAN_LINE MATCHES "^[ \\t]*//")
            # Check if this is a friend declaration line
            if(CLEAN_LINE MATCHES "friend.*Operator::")
                # Check if it's a template friend declaration
                if(CLEAN_LINE MATCHES "template<")
                    # Extract the template parameter (assuming FitnessResultType for now)
                    set(TEMPLATE_PARAM "FitnessResultType")
                    
                    # Remove the template part: "template<...> friend" -> "friend"
                    string(REGEX REPLACE "^[ \\t]*template<[^>]*>[ \\t]*" "" TEMPLATE_FREE_LINE "${CLEAN_LINE}")
                    
                    # Find the function name and add template instantiation
                    # Pattern: "friend ReturnType Operator::functionName("
                    if(TEMPLATE_FREE_LINE MATCHES "friend .* Operator::([a-zA-Z0-9_]+)\\(")
                        set(FUNCTION_NAME "${CMAKE_MATCH_1}")
                        # Replace functionName( with functionName<FitnessResultType>(
                        string(REGEX REPLACE "Operator::${FUNCTION_NAME}\\(" "Operator::${FUNCTION_NAME}<${TEMPLATE_PARAM}>(" TEMPLATE_FREE_LINE "${TEMPLATE_FREE_LINE}")
                    endif()
                    
                    # Ensure line ends with semicolon
                    if(NOT TEMPLATE_FREE_LINE MATCHES ";[ \\t]*$")
                        string(APPEND TEMPLATE_FREE_LINE ";")
                    endif()
                    string(APPEND TEMPLATE_FRIENDS_CONTENT "    ${TEMPLATE_FREE_LINE}\n")
                    message(STATUS "  Converted template friend: ${TEMPLATE_FREE_LINE}")
                else()
                    # Regular friend declaration - use as is
                    # Ensure line ends with semicolon
                    if(NOT CLEAN_LINE MATCHES ";[ \\t]*$")
                        string(APPEND CLEAN_LINE ";")
                    endif()
                    string(APPEND TEMPLATE_FRIENDS_CONTENT "    ${CLEAN_LINE}\n")
                    message(STATUS "  Copied regular friend: ${CLEAN_LINE}")
                endif()
            endif()
        endif()
    endforeach()
    
    # Write output file
    file(WRITE ${OUTPUT_FILE} "${TEMPLATE_FRIENDS_CONTENT}")
    
    message(STATUS "Template friend declarations saved to: ${OUTPUT_FILE}")
endfunction()