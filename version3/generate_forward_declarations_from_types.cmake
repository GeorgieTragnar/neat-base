# Generate Forward Declarations from Discovered Types
# Takes the output from discover_all_types.cmake and generates clean forward declarations

function(generate_forward_declarations_from_types DISCOVERED_TYPES_FILE OUTPUT_FILE)
    message(STATUS "Generating forward declarations from discovered types")
    message(STATUS "Input file: ${DISCOVERED_TYPES_FILE}")
    message(STATUS "Output file: ${OUTPUT_FILE}")
    
    # Load discovered types
    include(${DISCOVERED_TYPES_FILE})
    
    # Initialize output content
    set(FORWARD_CONTENT "// Auto-generated forward declarations\n")
    string(APPEND FORWARD_CONTENT "// This file is generated by CMake - do not edit manually\n")
    string(APPEND FORWARD_CONTENT "// Generated from discovered types in the codebase\n\n")
    
    # Generate global scope forward declarations
    if(DEFINED DISCOVERED_GLOBAL_TYPES AND DISCOVERED_GLOBAL_TYPES)
        string(APPEND FORWARD_CONTENT "// Global scope forward declarations\n")
        
        # Convert string to list
        string(REPLACE ";" ";" GLOBAL_LIST "${DISCOVERED_GLOBAL_TYPES}")
        
        set(TEMPLATE_TYPES_FOUND "")
        
        foreach(GLOBAL_TYPE ${GLOBAL_LIST})
            # Check if this is an enum class
            if(GLOBAL_TYPE MATCHES ":ENUM$")
                string(REGEX REPLACE ":ENUM$" "" ENUM_NAME "${GLOBAL_TYPE}")
                string(APPEND FORWARD_CONTENT "enum class ${ENUM_NAME};\n")
            else()
                # Regular class/struct - check if it's already declared as template
                set(IS_TEMPLATE FALSE)
                if(DEFINED DISCOVERED_TEMPLATE_TYPES AND DISCOVERED_TEMPLATE_TYPES)
                    string(REPLACE ";" ";" TEMPLATE_LIST "${DISCOVERED_TEMPLATE_TYPES}")
                    foreach(TEMPLATE_TYPE ${TEMPLATE_LIST})
                        if(TEMPLATE_TYPE MATCHES "class ${GLOBAL_TYPE}$")
                            set(IS_TEMPLATE TRUE)
                            list(APPEND TEMPLATE_TYPES_FOUND "${GLOBAL_TYPE}")
                            break()
                        endif()
                    endforeach()
                endif()
                
                # Only declare as class if not already a template
                if(NOT IS_TEMPLATE)
                    string(APPEND FORWARD_CONTENT "class ${GLOBAL_TYPE};\n")
                endif()
            endif()
        endforeach()
        
        string(APPEND FORWARD_CONTENT "\n")
    endif()
    
    # Generate template forward declarations
    if(DEFINED DISCOVERED_TEMPLATE_TYPES AND DISCOVERED_TEMPLATE_TYPES)
        string(APPEND FORWARD_CONTENT "// Template forward declarations\n")
        
        # Convert string to list
        string(REPLACE ";" ";" TEMPLATE_LIST "${DISCOVERED_TEMPLATE_TYPES}")
        
        foreach(TEMPLATE_TYPE ${TEMPLATE_LIST})
            string(APPEND FORWARD_CONTENT "${TEMPLATE_TYPE};\n")
        endforeach()
        
        string(APPEND FORWARD_CONTENT "\n")
    endif()
    
    # Generate Population namespace forward declarations
    if(DEFINED DISCOVERED_POPULATION_TYPES AND DISCOVERED_POPULATION_TYPES)
        string(APPEND FORWARD_CONTENT "// Population namespace forward declarations\n")
        string(APPEND FORWARD_CONTENT "namespace Population {\n")
        
        # Convert string to list
        string(REPLACE ";" ";" POPULATION_LIST "${DISCOVERED_POPULATION_TYPES}")
        
        foreach(POP_TYPE ${POPULATION_LIST})
            # Check if this is an enum class
            if(POP_TYPE MATCHES ":ENUM$")
                string(REGEX REPLACE ":ENUM$" "" ENUM_NAME "${POP_TYPE}")
                string(APPEND FORWARD_CONTENT "    enum class ${ENUM_NAME};\n")
            else()
                string(APPEND FORWARD_CONTENT "    class ${POP_TYPE};\n")
            endif()
        endforeach()
        
        string(APPEND FORWARD_CONTENT "}\n\n")
    endif()
    
    # Generate Operator namespace forward declarations
    if(DEFINED DISCOVERED_OPERATOR_TYPES AND DISCOVERED_OPERATOR_TYPES)
        string(APPEND FORWARD_CONTENT "// Operator namespace forward declarations\n")
        string(APPEND FORWARD_CONTENT "namespace Operator {\n")
        
        # Convert string to list
        string(REPLACE ";" ";" OPERATOR_LIST "${DISCOVERED_OPERATOR_TYPES}")
        
        foreach(OP_TYPE ${OPERATOR_LIST})
            # Check if this is an enum class
            if(OP_TYPE MATCHES ":ENUM$")
                string(REGEX REPLACE ":ENUM$" "" ENUM_NAME "${OP_TYPE}")
                string(APPEND FORWARD_CONTENT "    enum class ${ENUM_NAME};\n")
            else()
                string(APPEND FORWARD_CONTENT "    class ${OP_TYPE};\n")
            endif()
        endforeach()
        
        string(APPEND FORWARD_CONTENT "}\n\n")
    endif()
    
    # Write output file
    file(WRITE ${OUTPUT_FILE} "${FORWARD_CONTENT}")
    
    # Report what was generated
    set(TOTAL_FORWARDS 0)
    if(DEFINED DISCOVERED_GLOBAL_TYPES AND DISCOVERED_GLOBAL_TYPES)
        string(REPLACE ";" ";" GLOBAL_LIST "${DISCOVERED_GLOBAL_TYPES}")
        list(LENGTH GLOBAL_LIST GLOBAL_COUNT)
        math(EXPR TOTAL_FORWARDS "${TOTAL_FORWARDS} + ${GLOBAL_COUNT}")
    endif()
    
    if(DEFINED DISCOVERED_POPULATION_TYPES AND DISCOVERED_POPULATION_TYPES)
        string(REPLACE ";" ";" POP_LIST "${DISCOVERED_POPULATION_TYPES}")
        list(LENGTH POP_LIST POP_COUNT)
        math(EXPR TOTAL_FORWARDS "${TOTAL_FORWARDS} + ${POP_COUNT}")
    endif()
    
    if(DEFINED DISCOVERED_OPERATOR_TYPES AND DISCOVERED_OPERATOR_TYPES)
        string(REPLACE ";" ";" OP_LIST "${DISCOVERED_OPERATOR_TYPES}")
        list(LENGTH OP_LIST OP_COUNT)
        math(EXPR TOTAL_FORWARDS "${TOTAL_FORWARDS} + ${OP_COUNT}")
    endif()
    
    if(DEFINED DISCOVERED_TEMPLATE_TYPES AND DISCOVERED_TEMPLATE_TYPES)
        string(REPLACE ";" ";" TEMPLATE_LIST "${DISCOVERED_TEMPLATE_TYPES}")
        list(LENGTH TEMPLATE_LIST TEMPLATE_COUNT)
        math(EXPR TOTAL_FORWARDS "${TOTAL_FORWARDS} + ${TEMPLATE_COUNT}")
    endif()
    
    message(STATUS "Generated ${TOTAL_FORWARDS} forward declarations")
    message(STATUS "Forward declarations saved to: ${OUTPUT_FILE}")
endfunction()